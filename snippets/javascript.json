{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Console.Log Variable": {
		"prefix": "log",
		"body": [
			"log(`$0: \\${$0}`);",
		],
		"description": "Logs a variable to console specifying which one."
	},
	"DittoLib .attach()": {
		"prefix": ".attach(",
		"body": [
			".attach(${1:{\n    onEnter: function(args) {\n        $3\n    \\},}",
			"${2:    function(args) {\n        $0\n    \\},\n}});"
		],
		"description": "Basic .attach() snippet for dittolib3"
	},
	"DittoLib Get Singleton Instance": {
		"prefix": "Ditto.singleton()",
		"body": [
			"let object${0:ClassName};",
			"const ${0:ClassName} = Ditto.use(\"${0:ClassName}\");",
			"${0:ClassName}.\\$ctor.attach({",
			"    onEnter: function(args) {",
			"        if (!object${0:ClassName}) {",
			"            object${0:ClassName} = this;",
			"            console.log(`object${0:ClassName}: \\${object${0:ClassName}}`);",
			"        }",
			"    },",
			"});",
		],
		"description": "Creates a hook to get the main instance of singleton instances (i.e.: unique objects)."
	}
}
