{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// "Frida: Attach": {
	// 	"prefix": "Interceptor.attach",
	// 	"body": [
	// 		"Interceptor.attach(${1:getMethodOffset(${2:namespace}, ${3:className}, ${4:method}, ${5:arg#})}, {",
	// 		"    onEnter: (args) => {",
	// 		"        ${6:args[1] = 1;}",
	// 		"    },",
	// 		"    onLeave: (retval) => {",
	// 		"        ${7:retval.replace(ptr(0x0));}",
	// 		"    },",
	// 		"});"
	// 	],
	// 	"description": "Intercept calls to function at target. This is a NativePointer specifying the address of the function you would like to intercept calls to. Note that on 32-bit ARM this address must have its least significant bit set to 0 for ARM functions, and 1 for Thumb functions. Frida takes care of this detail for you if you get the address from a Frida API (for example Module.getExportByName()).\nThe callbacks argument is an object containing one or more of:\nonEnter: function (args): callback function given one argument args that can be used to read or write arguments as an array of NativePointer objects.\nonLeave: function (retval): callback function given one argument retval that is a NativePointer-derived object containing the raw return value. You may call retval.replace(1337) to replace the return value with the integer 1337, or retval.replace(ptr("0x1234")) to replace with a pointer. Note that this object is recycled across onLeave calls, so do not store and use it outside your callback. Make a deep copy if you need to store the contained value, e.g.: ptr(retval.toString())."
	// },
	// "Frida: Replace": {
	// 	"prefix": "Interceptor.replace",
	// 	"body": [
	// 		"Interceptor.replace(${1:getMethodOffset(${2:namespace}, ${3:className}, ${4:method}, ${5:arg#})}, new NativeCallback((${6:object, intArg}) => {",
	// 		"    $0",
	// 		"}, '${7:void}', [${8:'pointer'}, ${9:'int'}]));",
	// 	],
	// 	"description": "Replace function at target with implementation at replacement. This is typically used if you want to fully or partially replace an existing function’s implementation.\nUse NativeCallback to implement a replacement in JavaScript.\nIn case the replaced function is very hot, you may implement replacement in C using CModule. You may then also specify the third optional argument data, which is a NativePointer accessible through gum_invocation_context_get_listener_function_data(). Use gum_interceptor_get_current_invocation() to get hold of the GumInvocationContext *.\nNote that replacement will be kept alive until Interceptor#revert is called.\nIf you want to chain to the original implementation you can synchronously call target through a NativeFunction inside your implementation, which will bypass and go directly to the original implementation."
	// },
	"Frida: Replace & Chain": {
		"prefix": "Interceptor.chainReplace",
		"body": [
			"const functionToCall = new NativeFunction(${1:getMethodOffset(${2:namespace}, ${3:className}, ${4:method}, ${5:arg#})}, '${6:pointer}', ['pointer'${7}]);",
			"Interceptor.replace(${1:getMethodOffset(${2:namespace}, ${3:className}, ${4:method}, ${5:arg#})}, new NativeCallback( (object${8:${7}}) => {",
			"    functionToCall(object${8:${7}});",
			"    $0",
			"}, '${6:pointer}', ['pointer'${7}]));",
		],
		"description": "Replace function at target with itself at replacement. This is typically used if you want to fully or partially replace an existing function’s implementation.\nUse NativeCallback to implement a replacement in JavaScript.\nIn case the replaced function is very hot, you may implement replacement in C using CModule. You may then also specify the third optional argument data, which is a NativePointer accessible through gum_invocation_context_get_listener_function_data(). Use gum_interceptor_get_current_invocation() to get hold of the GumInvocationContext *.\nNote that replacement will be kept alive until Interceptor#revert is called.\nIf you want to chain to the original implementation you can synchronously call target through a NativeFunction inside your implementation, which will bypass and go directly to the original implementation."
	},
	"Frida: new NativeFunction": {
		"prefix": "new NativeFunction",
		"body": [
			"new NativeFunction(${1:getMethodOffset(${2:namespace}, ${3:className}, ${4:method}, ${5:arg#})}, '${6:pointer}', [${7:'pointer', 'pointer'}]);",
		],
		"description": "Create a new NativeFunction to call the function at address (specified with a NativePointer), where returnType specifies the return type, and the argTypes array specifies the argument types. You may optionally also specify abi if not system default. For variadic functions, add a '...' entry to argTypes between the fixed arguments and the variadic ones."
	},
}
