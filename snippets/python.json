{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    "Simple Class": {
        "description": "Simple class with __init__",
        "prefix": "class",
        "body": [
            "class ${1:ClassName}(object):",
            "    def __init__(self):",
            "        self.${2:var} = True"
        ],
    },
    "Default Logging": {
        "description": "Snippet for logzero using default logger, with custom formatter and some fixes.",
        "prefix": "pythonlogzero",
        "body": [
            "import logzero",
            "from logzero import logger",
            "",
            "logzero.LogFormatter.DEFAULT_COLORS[logzero.logging.CRITICAL] = logzero.ForegroundColors.RED",
            "CUSTOM_FORMAT = logzero.LogFormatter(",
            "    fmt='%(color)s[%(asctime)s] %(module)8.8s:%(lineno)3.3d %(levelname)1.1s | %(end_color)s%(message)s',",
            "    datefmt='%I:%M:%S')",
            "logzero.setup_default_logger(formatter=CUSTOM_FORMAT)",
        ]
    },
    "Boilerplate (with argparse)": {
        "description": "Default starting boilerplate for Python scripts with argument parsing.",
        "prefix": "pythonbpargs",
        "body": [
            "#!/usr/bin/env python3",
            "\"\"\"",
            "Module Docstring",
            "\"\"\"",
            "",
            "__author__ = \"Your Name\"",
            "__version__ = \"0.1.0\"",
            "__license__ = \"MIT\"",
            "",
            "import argparse",
            "from logzero import logger",
            "",
            "",
            "def main(args):",
            "    \"\"\" Main entry point of the app \"\"\"",
            "    logger.info(\"hello world\")",
            "    logger.info(args)",
            "",
            "",
            "if __name__ == \"__main__\":",
            "    parser = argparse.ArgumentParser()",
            "",
            "    # Required single positional argument",
            "    parser.add_argument(\"arg\", ",
            "                        help=\"Required positional argument (a single thing).\")",
            "",
            "    # Required multime positional arguments",
            "    parser.add_argument('items', nargs='+', ",
            "                         help='Required various positional arguments (a list).')",
            "",
            "    # Optional argument flag which defaults to False",
            "    parser.add_argument(\"-f\", \"--flag\", action=\"store_true\", default=False,",
            "                        help=\"Activate Flag (false by default)\")",
            "",
            "    # Optional argument which requires a parameter (eg. -d test)",
            "    parser.add_argument(\"-n\", \"--name\", action=\"store\", dest=\"name\",",
            "                        help=\"Specifies a name if necessary.\")",
            "",
            "    # Optional extra verbosity level.",
            "    parser.add_argument(\"-v\", \"--verbose\", action=\"store_const\", default=\"INFO\", const=\"DEBUG\",",
            "                        help=\"Increases verbosity. Shows debugging log messages.\")",
            "",
            "    # Specify output of \"--version\"",
            "    parser.add_argument(\"--version\", action=\"version\", ",
            "                        version=\"%(prog)s (version {version})\".format(version=__version__))",
            "",
            "    args = parser.parse_args()",
            "    logger.setLevel(args.verbose)",
            "",
            "    main(args)",
        ]
    },
    "Boilerplate (async with argparse)": {
        "description": "Default starting boilerplate for Python scripts with argument parsing.",
        "prefix": "pythonbpasync",
        "body": [
            "#!/usr/bin/env python3",
            "\"\"\"",
            "Module Docstring",
            "\"\"\"",
            "",
            "__author__ = \"Your Name\"",
            "__version__ = \"0.1.0\"",
            "__license__ = \"MIT\"",
            "",
            "import argparse",
            "import asyncio",
            "from sys import platform",
            "",
            "from logzero import logger",
            "",
            "",
            "class Main:",
            "    def __init__(self, args):",
            "        self.args = args",
            "",
            "    async def start(self):",
            "        logger.info(\"hello world\")",
            "        logger.info(self.args)",
            "",
            "",
            "if __name__ == \"__main__\":",
            "    if platform == 'win32':",
            "        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())",
            "    parser = argparse.ArgumentParser()",
            "",
            "    # Required single positional argument",
            "    parser.add_argument(\"arg\",",
            "                        help=\"Required positional argument (a single thing).\")",
            "",
            "    # Required multime positional arguments",
            "    parser.add_argument('items', nargs='+',",
            "                        help='Required various positional arguments (a list).')",
            "",
            "    # Optional argument flag which defaults to False",
            "    parser.add_argument(\"-f\", \"--flag\", action=\"store_true\", default=False,",
            "                        help=\"Activate Flag (false by default)\")",
            "",
            "    # Optional argument which requires a parameter (eg. -d test)",
            "    parser.add_argument(\"-n\", \"--name\", action=\"store\", dest=\"name\",",
            "                        help=\"Specifies a name if necessary.\")",
            "",
            "    # Optional extra verbosity level.",
            "    parser.add_argument(\"-v\", \"--verbose\", action=\"store_const\", default=\"INFO\", const=\"DEBUG\",",
            "                        help=\"Increases verbosity. Shows debugging log messages.\")",
            "",
            "    # Specify output of \"--version\"",
            "    parser.add_argument(\"--version\", action=\"version\", ",
            "                        version=\"%(prog)s (version {version})\".format(version=__version__))",
            "",
            "    args = parser.parse_args()",
            "    logger.setLevel(args.verbose)",
            "",
            "    asyncio.run(Main(args).start())",
        ]
    },
}
